<style>
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}

.small-code pre code {
  font-size: 1.4em;
}
.footer {
    color: black; background: #E8E8E8;
    position: fixed; top: 90%;
    text-align:center; width:100%;
}
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
.title {
  font-size: 0.3em;
  font-style: italic;
  color: white;
  text-align: center;
}
.centeremp {
  font-size: 0.3em;
  font-style: italic;
  color: red;
  text-align: center;
}
/* titles */
.reveal h3 { 
  font-size: 140%;
  color: gray;
}
/* body text, ordered and unordered list styles */
.reveal ul, 
.reveal ol, 
.reveal p{
    font-size: 120%;
    line-height: 105%;
    list-style-type: disc;
}

</style>

========================================================
author: 
date: 
font-family: 'Helvetica'
css: custom.css
width: 1540
height: 900

<br><br>
<div class="title" style="font-size: .8em;">A very brief..</div>

<div class="title" style="font-size: 2.5em": ">Intro to R</div>

<br><br><br>
<hr />
<p style="text-align: center;"><a href="https://github.com/mladencucak/">Mladen Čučak</a></p>
<p style="text-align: center;"><span style="color: #808080;"><em>mladencucak@gmail.com</em></span></p>



Topics
========================================================
- About R/RStudio
- Basics of programming with R
- Data analysis with `tidyverse`
  
<br><br><br><br><br>
These materials are based on the APS's "R for Plant Pathologists", a more comprehensive 
workshop available [here](https://everhartlab.github.io/APS_IntroR_2020/index.html)
 


Why R 
========================================================
<br>
-   **Performance**: stable, light and fast

-   **Support network**: documentation, community, developers

-   **Reproducibility**: anyone anywhere can reproduce results

-   **Versatility**: unified solution to *almost* any numerical problem and 
    graphical capabilities

-   **Ethics**: accessible to anyone as it is free and open source


Be strong! 
====================================
Transition from "point and click" is tough but rewarding

<div align="center">
<img src="img/progres_curves.png" width=1450 height=750>
</div>

Baby steps
====================================
<!-- I am decent programmer now. I know what to type in search box! -->
Help:
* **Google**: just add "with R" at the end of any search
* **Stack Overflow**: programming questions
* **Cross Validated**: scientific questions  

Learning:
* "R for Data Science" → <https://r4ds.had.co.nz>
* R4DS Learning Community → <https://rfordatasci.com>

<div class="centeremp" style="font-size: 1.3em;">Stay focused! Don't get overwhelmed!</div>


Your new best friends
====================================
autosize: small
Cheatsheets → <https://rstudio.com/resources/cheatsheets/>
<center><img src="img/cheatsheet.PNG" width = 1200></center>


====================================
transition: linear
left: 50%
<br><br>
**R** – programming language for statistical computing, data manipulation, and graphics  
<br><br>
![alt text](img/Rlogo.png)  
<br>
</http://www.r-project.org/>

***
<br><br>
**RStudio** – Integrated Development Environment (IDE) makes our life much easier
   
![alt text](img/Rstudio_logo.png)
<https://rstudio.com/>

How is that? 
====================================
left: 50%
<br><br>
**R** – Engine  
<br>
![alt text](img/rengine.png)

***
<br>
**RStudio** – Dashboard  
   
![alt text](img/dashboard.png)

R interface 
====================================
<center>
...*is not the friendliest one*...
</center>
<div class="midcenter" style="margin-left:-300px; margin-top:-200px;">
<img src="img/R.png"></img>
</div>

RStudio (IDE) 
====================================
<center>
<img src="img/RStudio-console.png" width=1000 height=500>
</center>


Move onto some coding
====================================
- Move the cursor onto a line with R code and pres (Win)*Ctrl* + *Enter* or (MAC)*Cmd* + *Return*.  
<br>
<div align="justify">
*Challenge: Do it with one hand you are not using to hold the mouse!*
<div>

Tip for later:
- To run an entire script (Win)*Ctrl* + *Shift* + *Enter* or (MAC)*Cmd* + *Shift* +
*Return*
- Many other keyboard shortcuts in RStudio (Win)*Alt*+*Shift*+*K* or (MAC)*Option*+*Shift*+*K*


R basics: In R, we have...
====================================
left: 35%
class: small-code

**Objects**, where the data is stored.  
Data is assigned using `<-`
```{r }
x <- 1
y <- 2
x + y
```
the same result if: 
```{r}
1+3
```
***

R basics: In R, we have...
====================================
left: 35%
class: small-code

**Objects**, where the data is stored.  
Data is assigned using `<-`
```{r }
x <- 1
y <- 2
x + y
```
the same result if: 
```{r}
1+3
```

***
**Functions** are applied on these objects to analyze the data. 
```{r custom_functions}
# I am a comment!!! Just here to help jog the memory later on...
# Let us make a function!
addition <- function(argument_one,
                     argument_two){ 
  argument_one + argument_two # operations
} # curly brackets define operations

ls() # check content of the environment
addition(argument_one = x,
         argument_two = y)
```

R basics: In R, we have...
====================================
left: 28%
class: small-code

**Objects**, where the data is stored.  
Data is assigned using `<-`
```{r }
x <- 1
y <- 2
x + y
```
the same result if: 
```{r}
1+3
```

***
**Functions** which are applied on objects or another functions (i.e. to analyze the data) 
```{r }
addition <- function(argument_one, argument_two){ 
  argument_one + argument_two 
} 
addition(argument_one = x,
         argument_two = y)
# Notice the difference?!
addition(x, y)
addition(x, y) == x+y #notice double "="
all.equal(addition(x, y), x+y) #Same as above, but pre-made
```


Objects: Vectors
====================================
left: 50%
class: small-code

*Vectors* store data of the same type  
(a column of an excel table)
<center>
<img src="img/vector.png" width=90 height=60>
</center>
Types of data:
```{r}
num <- c(50, 60, 65) 

char <- c("mouse", "rat", "dog") 

fct <- factor("low", "med", "high")

dates <- as.Date(c("02/27/92", "02/27/92", "01/14/92"), "%m/%d/%y")

logical <-  c(FALSE, FALSE, TRUE) # only TRUE or FALSE
```

***


Objects: Vectors
====================================
left: 47%
class: small-code

*Vectors* store data of the same type  
(a column of an excel table)
<center>
<img src="img/vector.png" width=90 height=60>
</center>
Types of data:
```{r}
num <- c(50, 60, 65) 

char <- c("mouse", "rat", "dog") 

fct <- factor("low", "med", "high")

dates <- as.Date(c("02/27/92", "02/27/92", "01/14/92"), "%m/%d/%y")

logical <-  c(FALSE, FALSE, TRUE) # only TRUE or FALSE
```

***
Subsetting and Indexing
```{r}
num[1] # 1st element
num[num >= 60] # More than or equal
char == "dog" # see logical on the left
char[logical]
char[char == "dog"]
```





Objects: Dataframes
====================================
left: 44%
class: small-code

*Dataframe* is a set of vectors of same length(an entire excel table) 
<center>
<img src="img/dataframes.png" width=210 height=110>
</center>
Creating and viewing data frames
```{r}
df <- data.frame(col_one = num,
                 col_two = char)
print(df)
head(df,1)
```

***
Same logic for indexing, just in 2 dimensions
```{r}
df[1, 1] # [rows, columns]
df[, 1] # 1st column in the data frame
df[, -2] # Exclude 2nd column
df[2:3, "col_two"] 
df$col_two
```



R packages 
====================================
Pre-made set of functions for common (and not so common) tasks
<center>
<img src="img/Rand_apps.png"></img>
</center>

A package of R packages: tidyverse
====================================
Think of something like Microsoft Office suite
<center>
<img src="img/tidyverse.png"></img>
</center>

Data analysis with tidyverse 
====================================
`tidyverse` and data analysis cycle
<center>
<img src="img/tidyverse-process.png"></img>
</center>

Data import
====================================
Number of functions within `readr` and `readxl` for different types of files.  
<br>
Here we will use the 



Data transformation
====================================
**Functions**  
<br>
Six key `dplyr` functions that allow you to solve the vast majority of your data transformation challenges:

|Function| Description|
|:-------------------------:|-----------------------------|
|`filter`| pick observations based on values|
|`select`| pick variables|
|`summarize`| compute statistical summaries|
|`group_by`| perform operations at different levels of your data|
|`arrange`| reorder data|
|`mutate`| create new variables|
***
**Piping**  
<br>
From `magrittr` package.  
Traditional approach:  
```{r eval = FALSE}
function(argument_one, argument_two,...)  
```
pipe `%\>%` approach:  
```{r eval = FALSE}
argument_one %>% 
  function(., argument_two,...)  
```


```{r libs, echo = FALSE}
library("tidyverse")
library("here")
dt <- read_csv(here::here("data", "survey_clean.csv"))

```

Test these
====================================
left: 50%
```{r }
(dt_small <- 
dt %>%
  select(cultivar, zone, inc) %>% 
  group_by(cultivar, zone) %>%
  slice(head(row_number(), 1)) %>% 
  filter(zone =="Sheka" |zone ==  "Sidama") %>% 
  ungroup())
```
***
```{r select}
dt_small %>% 
  select(cultivar, zone)
```

```{r}
dt_small %>%
  group_by(cultivar) %>%
  summarize(mean_inc = mean(inc),
            min_weight = min(inc)) %>%
    arrange(desc(mean_inc))
```

Reshaping data
====================================

```{r}

(dt_small_wide <- 
dt_small %>%
  pivot_wider(names_from = "cultivar", 
              values_from = "inc"))
```

***
`pivot_longer()` makes dataframes longer by increasing the number of rows and decreasing the number of columns.
```{r}
dt_small_wide %>% 
  pivot_longer( cols = c("Improved", "Local", "Mixture"), # columns to gather  
                names_to = "cultivar", # spread across the column names
                values_to = "inc")

```